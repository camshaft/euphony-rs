[{"/Users/bythewc/Projects/camshaft/euphony-rs/euphony-auto-tuner/src/App.tsx":"1","/Users/bythewc/Projects/camshaft/euphony-rs/euphony-auto-tuner/src/Bar.tsx":"2","/Users/bythewc/Projects/camshaft/euphony-rs/euphony-auto-tuner/src/index.tsx":"3","/Users/bythewc/Projects/camshaft/euphony-rs/euphony-auto-tuner/src/Scheduler.tsx":"4","/Users/bythewc/Projects/camshaft/euphony-rs/euphony-auto-tuner/src/native.tsx":"5"},{"size":953,"mtime":1606892364259,"results":"6","hashOfConfig":"7"},{"size":3475,"mtime":1606881481139,"results":"8","hashOfConfig":"7"},{"size":207,"mtime":1606880111499,"results":"9","hashOfConfig":"7"},{"size":3041,"mtime":1606894496948,"results":"10","hashOfConfig":"7"},{"size":1257,"mtime":1606894399528,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"lr1vgf",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/bythewc/Projects/camshaft/euphony-rs/euphony-auto-tuner/src/App.tsx",[],["26","27"],"/Users/bythewc/Projects/camshaft/euphony-rs/euphony-auto-tuner/src/Bar.tsx",["28","29","30"],"import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport { useMIDI } from \"@react-midi/hooks\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nexport function Bar({\n    setInput,\n    input,\n    setOutput,\n    output,\n}: {\n    setInput: (v: string) => void;\n    input: string;\n    setOutput: (v: string) => void;\n    output: string;\n}) {\n    const classes = useStyles();\n    const { inputs, outputs } = useMIDI();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                    >\n                        Menu\n                    </IconButton>\n                    <div className={classes.title} />\n                    <Picker\n                        set={setInput}\n                        value={input}\n                        values={inputs}\n                        label=\"Input\"\n                    />\n                    <Picker\n                        set={setOutput}\n                        value={output}\n                        values={outputs}\n                        label=\"Output\"\n                    />\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\nconst usePickerStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        formControl: {\n            margin: theme.spacing(1),\n            minWidth: 120,\n        },\n        selectEmpty: {\n            marginTop: theme.spacing(2),\n        },\n        select: {\n            color: theme.palette.primary.contrastText,\n        },\n    })\n);\n\ninterface Thing {\n    id: string;\n    name: string;\n}\n\nfunction Picker({\n    set,\n    value,\n    values,\n    label,\n}: {\n    set: (v: string) => void;\n    value: string;\n    label: string;\n    values: Thing[];\n}) {\n    const classes = usePickerStyles();\n\n    const id = `picker-midi-${label}`;\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        set(event.target.value as string);\n    };\n\n    return (\n        <FormControl className={classes.formControl}>\n            <InputLabel className={classes.select} id={`${id}-label`}>\n                {label}\n            </InputLabel>\n            <Select\n                labelId={`${id}-label`}\n                id={id}\n                value={value}\n                onChange={handleChange}\n                className={classes.select}\n            >\n                {values.map((input, key) => (\n                    <MenuItem key={key} value={input.id}>\n                        {input.name}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n}\n","/Users/bythewc/Projects/camshaft/euphony-rs/euphony-auto-tuner/src/index.tsx",[],["31","32"],"/Users/bythewc/Projects/camshaft/euphony-rs/euphony-auto-tuner/src/Scheduler.tsx",["33","34","35","36","37"],"import {\n    useMIDIMessage,\n    useMIDI,\n    Connection,\n    Input,\n    Output,\n    MIDIMessage,\n} from \"@react-midi/hooks\";\nimport { default as React, useEffect, useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { useNative } from \"./native\";\n\nfunction useConnectInput(\n    input: Input | null,\n    onMessage: (msg: MIDIMessage) => void,\n    watchers: any[]\n) {\n    useEffect(() => {\n        if (input == null) return () => {};\n        input.onmidimessage = onMessage;\n        return () => (input.onmidimessage = () => {});\n    }, [input].concat(watchers));\n}\n\nexport function Scheduler({ input, output }: { input: Input; output: Output }) {\n    const [native, error] = useNative();\n    const [mode, setMode] = useState(0);\n    const [tonic, setTonic] = useState(0);\n\n    useConnectInput(\n        input,\n        (msg: MIDIMessage) => {\n            if (!(native && native.process) || !output) return;\n            const outMsg = new Uint8Array(32);\n            const len = native.process(\n                new Uint8Array(msg.data),\n                outMsg,\n                mode,\n                tonic\n            );\n            if (!len) return;\n            output.send((outMsg.slice(0, len) as unknown) as number[]);\n        },\n        [mode, tonic]\n    );\n\n    if (error) return <pre>{error.toString()}</pre>;\n    if (!native) return <pre>LOADING</pre>;\n\n    return (\n        <>\n            <h3>Mode</h3>\n            <ul>\n                {Object.keys(native.modes).map((system, idx) => (\n                    <li key={idx}>\n                        <h3>{system}</h3>\n                        <ul>\n                            {native.modes[system].map(({ name, id }) => (\n                                <li key={id}>\n                                    <Button\n                                        variant={\n                                            id === mode ? \"contained\" : \"text\"\n                                        }\n                                        color={\n                                            id === mode ? \"primary\" : \"default\"\n                                        }\n                                        onClick={() => setMode(id)}\n                                    >\n                                        {name}\n                                    </Button>\n                                </li>\n                            ))}\n                        </ul>\n                    </li>\n                ))}\n            </ul>\n            <h3>Tonic</h3>\n            <ul>\n                {native.tonics.map((name, idx) => (\n                    <li key={idx}>\n                        <Button\n                            variant={idx === tonic ? \"contained\" : \"text\"}\n                            color={idx === tonic ? \"primary\" : \"default\"}\n                            onClick={() => setTonic(idx)}\n                        >\n                            {name}\n                        </Button>\n                    </li>\n                ))}\n            </ul>\n        </>\n    );\n}\n","/Users/bythewc/Projects/camshaft/euphony-rs/euphony-auto-tuner/src/native.tsx",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":4,"column":8,"nodeType":"44","messageId":"45","endLine":4,"endColumn":18},{"ruleId":"42","severity":1,"message":"46","line":5,"column":8,"nodeType":"44","messageId":"45","endLine":5,"endColumn":14},{"ruleId":"42","severity":1,"message":"47","line":9,"column":8,"nodeType":"44","messageId":"45","endLine":9,"endColumn":22},{"ruleId":"38","replacedBy":"48"},{"ruleId":"40","replacedBy":"49"},{"ruleId":"42","severity":1,"message":"50","line":2,"column":5,"nodeType":"44","messageId":"45","endLine":2,"endColumn":19},{"ruleId":"42","severity":1,"message":"51","line":3,"column":5,"nodeType":"44","messageId":"45","endLine":3,"endColumn":12},{"ruleId":"42","severity":1,"message":"52","line":4,"column":5,"nodeType":"44","messageId":"45","endLine":4,"endColumn":15},{"ruleId":"53","severity":1,"message":"54","line":22,"column":8,"nodeType":"55","endLine":22,"endColumn":32},{"ruleId":"53","severity":1,"message":"56","line":22,"column":8,"nodeType":"55","endLine":22,"endColumn":32,"suggestions":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'FormHelperText' is defined but never used.",["58"],["59"],"'useMIDIMessage' is defined but never used.","'useMIDI' is defined but never used.","'Connection' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","CallExpression","React Hook useEffect has missing dependencies: 'input' and 'onMessage'. Either include them or remove the dependency array.",["60"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},"Update the dependencies array to be: [input, onMessage]",{"range":"63","text":"64"},[562,586],"[input, onMessage]"]